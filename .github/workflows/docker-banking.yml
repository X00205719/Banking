name: ACR - Banking

on:
  workflow_dispatch:

env:
  VERSION: "1"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install jq
      run: sudo apt-get install jq
      
    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry with Service Principal
      run: |
          docker login -u ${{ secrets.AZ_CLIENT_ID }} -p ${{ secrets.AZ_CLIENT_SECRET }} ${{ secrets.REGISTRY_NAME }}.azurecr.io
  
    - name: Build Docker image
      run: |
        docker build -f dockerfile -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/banking:${{ github.sha }} .
        docker tag ${{ secrets.REGISTRY_NAME }}.azurecr.io/banking:${{ github.sha }} ${{ secrets.REGISTRY_NAME }}.azurecr.io/banking:${{ env.VERSION }}.${{ github.run_number }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.REGISTRY_NAME }}.azurecr.io/banking:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Push Docker image to Azure Container Registry
      run: |
        docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/banking:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/banking:${{ env.VERSION }}.${{ github.run_number }}

    - name: Checkout another repository
      uses: actions/checkout@v2
      with:
        repository: 'X00205719/Kustomize'
        path: 'Kustomize'
        ref: 'main'
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    
    - name: Set up Kustomize
      uses: imranismail/setup-kustomize@v1

    - name: Generate and Commit Kustomize Configuration
      run: |
        cd Kustomize/overlays/canary
        kustomize edit set image lostud.azurecr.io/banking=${{ secrets.REGISTRY_NAME }}.azurecr.io/banking:${{ env.VERSION }}.${{ github.run_number }}
        kustomize build . 
        git add kustomization.yaml
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "Update canary configuration to v${{ env.VERSION }}.${{ github.run_number }}"
        git push origin main

    - name: Pause for 1 minute
      run: |
          echo "Pausing for 1 minute..."
          sleep 60
          echo "Resuming the workflow."

    - name: Construct URL
      run: |
        echo "URL=http://${{ secrets.KIALI_SERVER_IP }}/kiali/api/namespaces/default/workloads/banking-deployment-canary/graph?duration=120s&graphType=workload&responseTime=95&appenders=responseTime,throughput&rateHttp=requests" >> $GITHUB_ENV
    
    - name: Fetch Data with Retries
      run: |
        MAX_RETRIES=3
        count=0
        
        while [ $count -lt $MAX_RETRIES ]; do
          RESPONSE=$(curl -s "$URL")
          echo "Response: $RESPONSE"  # Echo the response from server for debugging
          
          # Check if the response is not empty and contains expected data
          if [[ ! -z "$RESPONSE" && "$(echo $RESPONSE | jq '.elements')" != "null" ]]; then
            echo "Successfully fetched data"
            echo "RESPONSE=$RESPONSE" >> $GITHUB_ENV
            break
          else
            echo "Failed to fetch data, attempting retry $((count + 1))"
            ((count++))
            sleep 5  # Wait for 5 seconds before retrying
          fi
        done
        
        if [ $count -eq $MAX_RETRIES ]; then
          echo "Failed after $MAX_RETRIES attempts."
          exit 1
        fi
    
    - name: Process Response Data
      run: |
        # Attempt to parse the response
        HTTP_PERCENT_REQ=$(echo $RESPONSE | jq '.elements.edges[] | select(.data.target | select(.workload == "banking-deployment-canary" and .namespace == "default")).data.traffic.rates.httpPercentReq | tonumber' 2> /dev/null)
        JQ_EXIT_CODE=$?
    
        # Check if jq encountered an error
        if [ $JQ_EXIT_CODE -ne 0 ]; then
          echo "Error processing JSON data with jq. Please check the JSON structure."
          exit 1
        fi
    
        # Check and log the HTTP percent request
        echo "HTTP Percent Request: $HTTP_PERCENT_REQ"
        
        if [[ ! -z "$HTTP_PERCENT_REQ" && $(echo "$HTTP_PERCENT_REQ > 98" | bc -l) -eq 1 ]]; then
          echo "Result: true"
        else
          echo "Result: false"
        fi
    